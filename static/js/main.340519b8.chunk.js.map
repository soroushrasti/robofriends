{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Errorboundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","cardcomponent","map","user","i","key","SearchBox","searchField","searchChange","type","onChange","placeholder","Scroll","props","style","overflowY","border","height","children","Errorboundry","state","haserror","error","info","this","setState","Component","App","onsearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredrobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCJSC,EAZJ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACtB,OACE,yBAAKC,UAAU,mDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,+BAAKC,MCMFK,EAXA,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GAElC,OAAO,kBAAC,EAAD,CAAMT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,MAAOW,IAAKD,OAGpF,OAAQ,6BAAMH,ICAJK,EAPC,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC1B,OACA,yBAAKZ,UAAU,OACd,2BAAOa,KAAK,SAASb,UAAU,mCAAmCc,SAAUF,EAAeG,YAAY,oBCI7FC,G,MAPF,SAACC,GACd,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UAC9DJ,EAAMK,YCaAC,E,kDAfX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CAACC,UAAS,GAFP,E,8DAKAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAIG,KAAKJ,MAAMC,SACJ,wCACEG,KAAKX,MAAMK,a,GAZLQ,aCiDZC,E,kDAzCX,aAAc,IAAD,8BACT,gBAcLC,eAAe,SAACC,GACb,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAdtC,EAAKZ,MAAM,CAACpB,OAAO,GACnB8B,YAAY,KAHH,E,gEAQO,IAAD,OAEhBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAS,EAAKZ,SAAS,CAACzB,OAAOqC,S,+BAQnC,IAAD,EACuBb,KAAKJ,MAAzBpB,EADH,EACGA,OAAO8B,EADV,EACUA,YAERQ,EACNtC,EAAOuC,QAAO,SAAAvC,GAAW,OAAOA,EAAOP,KAAK+C,cAAcC,SAASX,EAAYU,kBAE/E,OAAIxC,EAAO0C,OAIH,yBAAK9C,UAAU,MACnB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACJ,kBAAC,EAAD,CAAU5B,OAAQsC,OARX,wBAAI1C,UAAU,MAAd,e,GA5BG8B,aCAlBiB,IAASC,OACP,6BACA,kBAAC,EAAD,OAEEC,SAASC,eAAe,SPsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.340519b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card=({name,email,id})=> {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?200*200`} alt=\"robots\" />\n        <div>\n            <h2>{name}</h2>\n            <p> {email}</p>\n        </div>  \n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card'\n\nconst CardList=({robots})=> {\n  const cardcomponent = robots.map((user,i) => {\n\n       return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={i} />\n     })\n    \n     return (<div>{cardcomponent}</div>);\n    }\n    \n  \n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox=({searchField,searchChange}) => {\n    return(\n    <div className='pa2'>\n     <input type='search' className='pa3 ba b--green bg-lightest-blue' onChange={searchChange}  placeholder='search robots'/>\n    </div> );\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll=(props)=>{\nreturn (\n    <div style={{overflowY:'scroll', border:'1px solid black' ,height: '800px' }}>\n        {props.children}\n    </div>\n)\n}\nexport default Scroll;","import React , {Component} from 'react';\n\nclass Errorboundry extends Component {\n    constructor(props){\n        super(props);\n        this.state={haserror:false}\n    }\n\n    componentDidCatch(error, info){\n        this.setState({haserror:true})\n    }\n    render(){\n        if (this.state.haserror){\n            return <h1>An error</h1>     \n        }else{return this.props.children}\n    }\n}\n\nexport default Errorboundry","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\n//import {robots} from './robots';\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\nimport Scroll from '../components/Scroll'\nimport Errorboundry from '../components/Errorboundry'\n\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state={robots:[] ,\n        searchfield:' '}\n    }\n\n    \n\n    componentDidMount(){\n       // this.setState({robots:robots})\n       fetch('https://jsonplaceholder.typicode.com/users')\n       .then(response=> response.json())\n       .then(users=> {this.setState({robots:users})});\n    }\n\n   onsearchChange=(event)=>{\n      this.setState({searchfield:event.target.value})\n\n   }\n\nrender(){\n    const {robots,searchfield}=this.state\n\n    const filteredrobots = \n    robots.filter(robots => {return robots.name.toLowerCase().includes(searchfield.toLowerCase() ); });\n\n    if(!robots.length){\n        return <h1 className='tc'>Loading</h1>\n    }else{\n    \n    return (<div className='tc'>\n        <h1 className='f1' >RoboFriends</h1>\n        <SearchBox searchChange={this.onsearchChange} />\n        <Scroll>\n            <Errorboundry>\n        <CardList robots={filteredrobots} />\n        </Errorboundry>\n        </Scroll>\n        </div>);\n}}\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import CardList from './CardList'\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n//import {robots} from './robots'\nimport App from './containers/App.js'\n\nReactDOM.render(\n  <div>\n  <App />\n  </div>\n  , document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}