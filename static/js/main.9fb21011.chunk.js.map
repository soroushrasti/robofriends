{"version":3,"sources":["registerServiceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Errorboundry.js","containers/App.js","actions.js","constant.js","reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Card","name","email","id","className","src","alt","CardList","robots","cardcomponent","map","user","i","key","SearchBox","searchField","searchChange","type","onChange","placeholder","Scroll","props","style","overflowY","border","height","children","Errorboundry","haserror","info","this","setState","Component","App","onRequestRobots","onsearchChange","ispending","filteredrobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateRobots","initialStateSearch","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9fb21011.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\n\nconst Card=({name,email,id})=> {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?200*200`} alt=\"robots\" />\n        <div>\n            <h2>{name}</h2>\n            <p> {email}</p>\n        </div>  \n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card'\n\nconst CardList=({robots})=> {\n  const cardcomponent = robots.map((user,i) => {\n\n       return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} key={i} />\n     })\n    \n     return (<div>{cardcomponent}</div>);\n    }\n    \n  \n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox=({searchField,searchChange}) => {\n    return(\n    <div className='pa2'>\n     <input type='search' className='pa3 ba b--green bg-lightest-blue' onChange={searchChange}  placeholder='search robots'/>\n    </div> );\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll=(props)=>{\nreturn (\n    <div style={{overflowY:'scroll', border:'1px solid black' ,height: '800px' }}>\n        {props.children}\n    </div>\n)\n}\nexport default Scroll;","import React , {Component} from 'react';\n\nclass Errorboundry extends Component {\n    constructor(props){\n        super(props);\n        this.state={haserror:false}\n    }\n\n    componentDidCatch(error, info){\n        this.setState({haserror:true})\n    }\n    render(){\n        if (this.state.haserror){\n            return <h1>An error</h1>     \n        }else{return this.props.children}\n    }\n}\n\nexport default Errorboundry","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\nimport Scroll from '../components/Scroll'\nimport Errorboundry from '../components/Errorboundry'\nimport {connect} from 'react-redux';\nimport { requestRobots, setSearchField } from '../actions';\n\nconst mapStatetoProps=state=>{\n    return{\n        searchField:state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        ispending: state.requestRobots.ispending,\n    }\n}\nconst mapDispatchToProps=(dispatch)=>{\n    return{\n        onsearchChange:(event)=>dispatch(setSearchField(event.target.value)),\n            onRequestRobots:()=>requestRobots(dispatch)       \n    }\n}\nclass App extends Component {\n    componentDidMount(){\n      this.props.onRequestRobots();\n    }\nrender(){\n    const {searchField, onsearchChange,robots,ispending}=this.props;\n    const filteredrobots = \n    robots.filter(robots => {return robots.name.toLowerCase().includes(searchField.toLowerCase() ); });\n\n        return ispending?\n        <h1 className='tc'>Loading</h1>\n    :(\n     <div className='tc'>\n         <p className='f5'>Welcome to Soroush Rasti's portfolio website!</p>\n         <p className='f5'>This website employed CSS design, and React and Redux technologies to request and wrap the Robots from \"https://jsonplaceholder.typicode.com\" </p>\n        <h1 className='f1' >RoboFriends</h1>\n        <SearchBox searchChange={onsearchChange} />\n        <Scroll>\n            <Errorboundry>\n        <CardList robots={filteredrobots} />\n        </Errorboundry>\n        </Scroll>\n        </div>\n\n    );\n}\n}\nexport default connect(mapStatetoProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAIL} from './constant.js';\n\nexport const setSearchField=(text)=>({\n    type:CHANGE_SEARCH_FIELD,\n    payload:text\n})\n\nexport const requestRobots=(dispatch)=>{\n       dispatch({type:REQUEST_ROBOTS_PENDING});\n         fetch('https://jsonplaceholder.typicode.com/users')\n       .then(response=> response.json())\n       .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n       .catch(error=>dispatch({type:REQUEST_ROBOTS_FAIL, payload:error}))\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAIL='REQUEST_ROBOTS_FAIL';\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAIL} from './constant.js';\n\nconst initialStateRobots={\n    ispending:false,\n    robots:[]\n}\n\nconst initialStateSearch = {\n    searchField: ''\n  }\n\n\n\nexport const requestRobots=(state=initialStateRobots,action={})=>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n                    return Object.assign({},state,{ispending:true});\n       case REQUEST_ROBOTS_SUCCESS:\n                    return Object.assign({},state,{robots:action.payload, ispending:false});\n        case REQUEST_ROBOTS_FAIL:\n                    return Object.assign({},state,{robots:action.payload, ispending:false});\n         default:\n             return state;   \n    }\n}\n\nexport const searchRobots=(state=initialStateSearch, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state,{searchField:action.payload})\n         default:\n             return state  \n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import CardList from './CardList'\nimport 'tachyons'\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './containers/App.js'\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport { applyMiddleware, combineReducers } from 'redux';\nimport {searchRobots,requestRobots} from './reducer';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n\nconst logger= createLogger();\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers,applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <Provider store={store} > \n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\nregisterServiceWorker();\n\n"],"sourceRoot":""}